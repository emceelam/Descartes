[%
  zoom_button_offset = 12;
  zoom_panel_width = 32;
  zoom_panel_height = dimensions.size * zoom_button_offset + 5;
  zoom_panel_color = "blue";
  zoom_button_color = "#c5eec5";
  magnifier_color = "black";
-%]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "DTD/xhtml1-transitional.dtd">
<!-- AUTHOR: Emcee Lam -->

<html xmlns="http://www.w3.org/1999/xhtml"
  xml:lang="en" lang="en">
  <head>
    <title>
      AJAX Map
    </title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta http-equiv="Content-Script-Type" content="text/javascript" />
    <style type="text/css">
      #outerDiv {
        width: [% view_port_width %]px; height: [% view_port_height %]px;
        border: 1px solid black; position: relative;
        overflow: hidden;
      }
      #innerDiv {
        position: relative;
        left: 0px;
        top: 0px;
        z-index: 0;
      }
      #resolutionInfo {
        border-left: 1px solid black;
        border-right: 1px solid black;
        border-bottom: 1px solid black;
        padding: 0px 2px;
        width: [% view_port_width - 4 %]px;
          /* 4 pixels shorter to compensate for 2px padding */
        background:#00cdcd;
        font: normal 10px sans-serif;
      }
      #zoomPanel {
        position: absolute;
        left:5px;
        top:5px;
        border: thin solid black;
        width: [% zoom_panel_width %]px;
        height: [% zoom_panel_height %]px;
        z-index:1;
      }
      #translucent {
        width: [% zoom_panel_width %]px;
        height: [% zoom_panel_height %]px;
        background-color: [% zoom_panel_color %];
        filter:alpha(opacity=0.15);
        -moz-opacity:0.15;
        opacity: 0.15;
      }
      #opaque {
        width: [% zoom_panel_width %]px;
        height: [% zoom_panel_height %]px;
        background-color: transparent;
        position: absolute;
        z-index: 2;
      }
      #magnifier {
        position:absolute; left:0px; top:0px; z-index:1;
        background-color:transparent; border: solid [% magnifier_color %] 1px;
      }
      div.miniMap {
        position: absolute; left:550px; top:10px; border: solid black 1px;
      }
      img {
        display: block;  /* fix for IE */
      }
    </style>
    <script type="text/javascript">
      //<![CDATA[

      var mainMap;
      var magnifier;

      function mapInit() {
        magnifier = new Magnifier();
        mainMap = new MainMap();

        var miniMapDiv = document.getElementById("miniMapInner");
        miniMapDiv.onmousedown
          = function (event) { return magnifier.startMove(event) };
        miniMapDiv.onmousemove
          = function (event) { return magnifier.processMove(event) };
        miniMapDiv.onmouseup
          = function (event) { return magnifier.stopMove(event) };
        miniMapDiv.ondragstart = function() { return false; } // for IE
      }

      function Magnifier () {
        var this1 = this;
        this.f_dragging = false;
        this.div = document.getElementById("magnifier");
        this.div.ondragstart = function() { return false; }  // for IE
        this.div.onmousedown
          = function (event) { return this1.startMove(event) };
        this.div.onmousemove
          = function (event) { return this1.processMove(event) };
        this.div.onmouseup
          = function (event) { return this1.stopMove(event) };
      }

      Magnifier.prototype.startMove =
        function (event) {
          // for IE
          if (!event)
            event = window.event;
  
          //var magnifierDiv = document.getElementById("magnifier");
          var magnifierDiv = this.div;
          this.dragStartLeft = event.clientX;
          this.dragStartTop  = event.clientY;
          magnifierDiv.style.cursor = "move";
  
          this.top  = atoi(magnifierDiv.style.top);
          this.left = atoi(magnifierDiv.style.left);
  
          this.f_dragging = true;
          return false;
        }

      /* As you drag the mouse in the mini map, the magnifier responds by
         moving. Likewise, the main map will show the current area
         enclosed by the magnifier. */
      Magnifier.prototype.processMove =
        function (event) {
          var magnifierDiv = this.div;
  
          if (!event) event = window.event;  // for IE
          if (this.f_dragging) {
  
            var minX = 0;
            var maxX 
              = [% mini_map_width %]  - (atoi(magnifierDiv.style.width) + 2);
                /* +2 because the borders are 1 pixel each */
            var minY = 0;
            var maxY 
              = [% mini_map_height %] - (atoi(magnifierDiv.style.height) + 2);
                /* +2 because the borders are 1 pixel each */
  
            var shiftedLeft = this.left + (event.clientX - this.dragStartLeft);
            if (shiftedLeft < minX) shiftedLeft = minX; // map is not infinite
            if (shiftedLeft > maxX) shiftedLeft = maxX;
            magnifierDiv.style.left = shiftedLeft + "px";
  
            var shiftedTop = this.top + (event.clientY - this.dragStartTop);
            if (shiftedTop < minY) shiftedTop = minY; // map is not infinite
            if (shiftedTop > maxY) shiftedTop = maxY;
            magnifierDiv.style.top = shiftedTop + "px";
  
            mainMap.setViewPort();
          }
  
          var magnifierInfo = document.getElementById("magnifierInfo");
          magnifierInfo.innerHTML = 
            "magnifier: (" 
              + magnifierDiv.style.left + "," + magnifierDiv.style.top + ") "
            + "x:" + event.clientX + ", y:" + event.clientY;
        }

      Magnifier.prototype.stopMove =
        function (event) {
          this.div.style.cursor = "";
          this.f_dragging = false;
        }

      Magnifier.prototype.setSize =
        function (innerDivWidth, innerDivHeight) {
          var magnifierWidth
            = Math.round([% view_port_width  * mini_map_width  %] / innerDivWidth) - 2;
            /* We subtract 2 because the borders are 1 pixel each */
          var magnifierHeight
            = Math.round([% view_port_height * mini_map_height %] / innerDivHeight) - 2;
            /* We subtract 2 because the borders are 1 pixel each */
          var magnifierDiv = document.getElementById("magnifier");
          magnifierDiv.style.width  = magnifierWidth  + "px";
          magnifierDiv.style.height = magnifierHeight + "px";
        }

      Magnifier.prototype.setPosition =
        function () {
          var innerDiv = document.getElementById("innerDiv");
          var innerDivWidth  = atoi(innerDiv.style.width);
          var innerDivHeight = atoi(innerDiv.style.height);
          var innerDivLeft   = atoi(innerDiv.style.left);
          var innerDivTop    = atoi(innerDiv.style.top);
          this.left
            = Math.round(Math.abs(innerDivLeft) * [% mini_map_width %] 
              / innerDivWidth);
          this.top
            = Math.round(Math.abs(innerDivTop)  * [% mini_map_height %] 
              / innerDivHeight);

          // alter magnifier
          var magnifierDiv = this.div;
          magnifierDiv.style.left = this.left + "px";
          magnifierDiv.style.top  = this.top  + "px";
        }

      function MainMap () {
        var this1 = this;

        // constants
        // view port is the visible portion of the main map
        this.viewPortWidth  = [% view_port_width %];
        this.viewPortHeight = [% view_port_height %];

        this.tileSize = [% tile_size %];
        this.f_dragging = false;
        this.innerDiv = document.getElementById("innerDiv");

        var outerDiv = document.getElementById("outerDiv");
        this.outerDiv = outerDiv;
        outerDiv.onmousedown
          = function(event) { return this1.startMove(event) };
        outerDiv.onmousemove
          = function(event) { return this1.processMove(event) };
        outerDiv.onmouseup
          = function(event) { return this1.stopMove(event) };
        outerDiv.ondragstart = function() { return false; }  // for IE

        this.zoom = 0;
        this.zoomDim = [
          [%- FOREACH dim = dimensions %]
            {
              width:[% dim.width %],
              height:[% dim.height %],
              scale:[% dim.scale %]
            },
          [%- END %]
        ]

        var zoomElt = this.zoomDim[this.zoom];
        this.setInnerDivSize (zoomElt.width, zoomElt.height, zoomElt.scale);
        this.checkTiles();
      }

      MainMap.prototype.startMove =
        function (event) {
          // for IE
          if (!event)
            event = window.event;
  
          this.dragStartLeft = event.clientX;
          this.dragStartTop  = event.clientY;
          var innerDiv = this.innerDiv;
          innerDiv.style.cursor = "move";
  
          this.top = atoi(innerDiv.style.top);
          this.left = atoi(innerDiv.style.left);
  
          this.f_dragging = true;
          return false;
        }

      MainMap.prototype.processMove =
        function (event) {
          var zoomElt = this.zoomDim[this.zoom];
          var maxY = 0;
          var minY = -(zoomElt.height - this.viewPortHeight);
          var maxX = 0;
          var minX = -(zoomElt.width  - this.viewPortWidth);
  
          if (!event) event = window.event;  // for IE
          var innerDiv = this.innerDiv;
          if (this.f_dragging) {
            var shiftedTop = this.top + (event.clientY - this.dragStartTop);
            if (shiftedTop > maxY) shiftedTop = maxY;  // map is not infinite
            if (shiftedTop < minY) shiftedTop = minY;
            innerDiv.style.top = shiftedTop + "px";
  
            var shiftedLeft = this.left + (event.clientX - this.dragStartLeft);
            if (shiftedLeft > maxX) shiftedLeft = maxX; // map is not infinite
            if (shiftedLeft < minX) shiftedLeft = minX;
            innerDiv.style.left = shiftedLeft + "px";
  
            this.checkTiles();
            magnifier.setPosition();
          }
  
          var infoDiv = document.getElementById("infoDiv");
          infoDiv.innerHTML =
            "main map (" + innerDiv.style.left + "," + innerDiv.style.top + ") "
              + "x:" + event.clientX + ", y:" + event.clientY;
        }

      MainMap.prototype.checkTiles =
        function () {
          var innerDiv = this.innerDiv;
          var tileSize = this.tileSize;
          var visibleTiles = this.getVisibleTiles();
          var visibleTilesMap = {};
          var i;
  
          //alert ("visibleTiles.length: " + visibleTiles.length);
  
          var scale = this.zoomDim[this.zoom].scale;
          for (i=0;i<visibleTiles.length; i++) {
            var tile = visibleTiles[i];
            var xy = "x" + tile.x + "y" + tile.y;
            var tileName
              =  xy + "z" + this.zoom;
            visibleTilesMap[tileName] = true;
            var img = document.getElementById (tileName);
            if (!img) {
              img = document.createElement("img");
              img.src 
                = "scale" + scale + "/" + xy + ".[% tile_file_ext %]";
              img.style.position = "absolute";
              img.style.left = (tile.x * tileSize) + "px";
              img.style.top = (tile.y * tileSize) + "px";
              img.setAttribute("id", tileName);
              innerDiv.appendChild(img);
            }
          }
  
          var imgs = innerDiv.getElementsByTagName("img");
          for (i = 0; i < imgs.length; i++) {
            var id = imgs[i].getAttribute("id");
            if (!visibleTilesMap[id]) {
              innerDiv.removeChild(imgs[i]);
              i--;
            }
          }
        }

      MainMap.prototype.getVisibleTiles =
        function () {
          var innerDiv = this.innerDiv;
          var mapX = atoi(innerDiv.style.left);
          var mapY = atoi(innerDiv.style.top);
          var tileSize = this.tileSize;
  
          var startX = Math.abs(Math.floor(mapX / tileSize)) - 1;
          if (startX < 0) startX = 0;
          var startY = Math.abs(Math.floor(mapY / tileSize)) - 1;
          if (startY < 0) startY = 0;
          var tilesX = Math.ceil(this.viewPortWidth / tileSize) + 1;
          var tilesY = Math.ceil(this.viewPortHeight / tileSize) + 1;
  
          var visibleTiles = [];
          var counter = 0;
          for (x = startX; x < (tilesX + startX); x++) {
            for (y = startY; y < (tilesY + startY); y++) {
              var tile = {};
              tile.x = x;
              tile.y = y;
              visibleTiles[counter++] = tile;
            }
          }
          return visibleTiles;
        }

      MainMap.prototype.stopMove =
        function (event) {
          this.innerDiv.style.cursor = "";
          this.f_dragging = false;
        }

      // movement in the magnifier moves main map's view port
      MainMap.prototype.setViewPort =
        function () {
          var magDiv   = document.getElementById("magnifier");
          var innerDiv = this.innerDiv;
          var magLeft        = atoi(magDiv.style.left);
          var magTop         = atoi(magDiv.style.top);
          var innerDivWidth  = atoi(innerDiv.style.width);
          var innerDivHeight = atoi(innerDiv.style.height);
  
          /* set innerDivLeft */
          var innerDivLeftMin = [% view_port_width %] - innerDivWidth;
          var innerDivLeft
            = Math.round((-magLeft) * innerDivWidth  / [% mini_map_width  %]);
          if (innerDivLeft < innerDivLeftMin) innerDivLeft = innerDivLeftMin;
          innerDiv.style.left = innerDivLeft + "px";

          /* set innerDivTop */
          var innerDivTopMin = [% view_port_height %] - innerDivHeight;
          var innerDivTop
            = Math.round((-magTop)  * innerDivHeight / [% mini_map_height %]);
          if (innerDivTop < innerDivTopMin) innerDivTop = innerDivTopMin;
          innerDiv.style.top  = innerDivTop  + "px";
  
          this.checkTiles();
        }

      MainMap.prototype.setInnerDivSize =
        function (width, height, scale) {
          var innerDiv = this.innerDiv;
          innerDiv.style.width  = width  + "px";
          innerDiv.style.height = height + "px";
          magnifier.setPosition();
          magnifier.setSize (width, height);

          var resolutionInfo = document.getElementById("resolutionInfo");
          resolutionInfo.innerHTML
            = scale + "%, " +  width + "px by " + height + "px" ;
        }

      MainMap.prototype.setZoom =
        function (newZoom) {
          if (this.zoom == newZoom) return;

          var oldZ = this.zoomDim[this.zoom];
          var newZ = this.zoomDim[newZoom];
          var innerDiv = this.innerDiv;
          var imgs = innerDiv.getElementsByTagName("img");
          while (imgs.length > 0) {
            innerDiv.removeChild(imgs[0]);
          }

          var oldLeft   = atoi(innerDiv.style.left);
          var oldTop    = atoi(innerDiv.style.top);

          var newLeft = Math.round(newZ.width  * oldLeft / oldZ.width);
          var newTop  = Math.round(newZ.height * oldTop  / oldZ.height);
          innerDiv.style.left = newLeft + "px";
          innerDiv.style.top  = newTop  + "px";

          this.zoom = newZoom;  // set the global zoom
          this.setInnerDivSize (newZ.width, newZ.height, newZ.scale);
          this.checkTiles();
        }

      function atoi (s) {
        if (s == null || s == '') {
          return 0;
        }
        return parseInt(s);
      }

      //]]>
    </script>
  </head>
  <body onload="mapInit()">
    <h2>AJAX Map (Beta)</h2>

    <!-- main map -->
    <div>
      <div id="outerDiv">
        <div id="zoomPanel">
          <div id="opaque">
            [%- FOREACH dim = dimensions %]
              <!-- zoom [% loop.index %]: [% dim.width %], [% dim.height %] -->
              <div style="position:absolute;
                          top:[% loop.index * zoom_button_offset + 5 %]px;
                          left:5px;
                          width:20px; height:5px; font-size:10%;
                          border:solid 1px black;
                          background: [% zoom_button_color %];"
                  onclick="mainMap.setZoom([% loop.index %])">
              </div>
            [%- END %]
          </div>
          <div id="translucent">
          </div>
        </div>
        <div id="innerDiv">
        </div>
      </div>
      <div id="resolutionInfo">
      </div>
    </div>

    <!-- mini map -->
    <div class="miniMap" >
      <div id="miniMapInner">
        <img src="rendered/mini_map.png" alt="mini map" border="0"
          style="width:[% mini_map_width %]px; height:[% mini_map_height %]px;" />
      </div>
      <div id="magnifier">
      </div>
    </div>

    <!-- informational box -->
    <div style="position:absolute; left:550px; top:300px; width:250px;
                border:black solid 1px; background-color:#d6e7ee;
                font:normal 10pt serif;">
      <div style="padding-left:2px;">
        <p>
          Google style draggable maps. Go ahead and mouse drag within the main
          map. The magnifier in the mini map is also draggable.
        </p>
        <p>
          This program takes a pdf, png, jpg, or gif and generates an AJAX map.
          You may <a href="[% file_base %].zip">download the generated files</a>
          to run this on your own web site.
        </p>
      </div>
      <div id="infoDiv" style="border-top: solid black thin;">
        main map
      </div>
      <div id="magnifierInfo">
        magnifier
      </div>
    </div>
  </body>
</html>
