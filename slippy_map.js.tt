
function mapInit() {
  var magnifier = Singleton.getMagnifier();
  var mainMap   = Singleton.getMainMap();

  var miniMapInner = document.getElementById("miniMapInner");
  miniMapInner.onmousedown
    = function (event) { return magnifier.startMove(event) };
  miniMapInner.onmousemove
    = function (event) { return magnifier.processMove(event) };
  miniMapInner.onmouseup
    = function (event) { return magnifier.stopMove(event) };
  miniMapInner.ondragstart = function() { return false; } // for IE

  var miniMap = document.getElementById("miniMap");
  miniMap.onwheel = function (event) {
    if (event.deltaY < 0) {
      mainMap.incrZoom();
    }
    else {
      mainMap.decrZoom();
    }
  };
}

function Magnifier () {
  var this1 = this;
  this.f_dragging = false;
  this.div = document.getElementById("magnifier");
  this.div.ondragstart = function() { return false; }  // for IE
  this.div.onmousedown
    = function (event) { return this1.startMove(event) };
  this.div.onmousemove
    = function (event) { return this1.processMove(event) };
  this.div.onmouseup
    = function (event) { return this1.stopMove(event) };
}

var Singleton = (function () {
  var instanceMagnifier;
  var instanceMainMap;

  return {
    getMagnifier: function () {
      if (!instanceMagnifier) {
        instanceMagnifier = new Magnifier();
      }
      return instanceMagnifier;
    },
    getMainMap: function () {
      if (!instanceMainMap) {
        instanceMainMap = new MainMap();
      }
      return instanceMainMap;
    },
  };
}) ();

Magnifier.prototype.startMove =
  function (event) {
    // for IE
    if (!event)
      event = window.event;

    var magnifierDiv = this.div;
    this.dragStartLeft = event.clientX;
    this.dragStartTop  = event.clientY;
    magnifierDiv.style.cursor = "move";

    this.top  = magnifierDiv.offsetTop;
    this.left = magnifierDiv.offsetLeft;

    this.f_dragging = true;
    return false;
  }

/* As you drag the mouse in the mini map, the magnifier responds by
    moving. Likewise, the main map will show the current area
    enclosed by the magnifier. */
Magnifier.prototype.processMove =
  function (event) {
    var magnifierDiv = this.div;

    if (!event) event = window.event;  // for IE
    if (this.f_dragging) {

      var minX = 0;
      var maxX = [% mini_map_width %]  - magnifierDiv.offsetWidth;
      var minY = 0;
      var maxY = [% mini_map_height %] - magnifierDiv.offsetHeight;

      var shiftedLeft = this.left + (event.clientX - this.dragStartLeft);
      if (shiftedLeft < minX) shiftedLeft = minX; // map is not infinite
      if (shiftedLeft > maxX) shiftedLeft = maxX;
      magnifierDiv.style.left = shiftedLeft + "px";

      var shiftedTop = this.top + (event.clientY - this.dragStartTop);
      if (shiftedTop < minY) shiftedTop = minY; // map is not infinite
      if (shiftedTop > maxY) shiftedTop = maxY;
      magnifierDiv.style.top = shiftedTop + "px";

      var mainMap = Singleton.getMainMap();
      mainMap.setViewPort();
    }

    var magnifierInfo = document.getElementById("magnifierInfo");
    magnifierInfo.innerHTML = 
      "magnifier: (" 
        + magnifierDiv.style.left + "," + magnifierDiv.style.top + ") "
      + "x:" + event.clientX + ", y:" + event.clientY;
  }

Magnifier.prototype.stopMove =
  function (event) {
    this.div.style.cursor = "";
    this.f_dragging = false;
  }

Magnifier.prototype.setSize =
  function (innerDivWidth, innerDivHeight) {
    var magnifierWidth
      = Math.round([% view_port_width  * mini_map_width  %] / innerDivWidth) - 2;
      /* We subtract 2 because the borders are 1 pixel each */
    var magnifierHeight
      = Math.round([% view_port_height * mini_map_height %] / innerDivHeight) - 2;
      /* We subtract 2 because the borders are 1 pixel each */
    var magnifierDiv = this.div;
    magnifierDiv.style.width  = magnifierWidth  + "px";
    magnifierDiv.style.height = magnifierHeight + "px";
  }

Magnifier.prototype.setPosition =
  function () {
    var innerDiv = document.getElementById("innerDiv");
    var innerDivWidth  = innerDiv.clientWidth;
    var innerDivHeight = innerDiv.clientHeight;
    var innerDivLeft   = innerDiv.offsetLeft;
    var innerDivTop    = innerDiv.offsetTop;
    this.left
      = Math.round(Math.abs(innerDivLeft) * [% mini_map_width %] 
        / innerDivWidth);
    this.top
      = Math.round(Math.abs(innerDivTop)  * [% mini_map_height %] 
        / innerDivHeight);

    // alter magnifier
    var magnifierDiv = this.div;
    magnifierDiv.style.left = this.left + "px";
    magnifierDiv.style.top  = this.top  + "px";
  }

function MainMap () {
  var this1 = this;

  // constants
  // view port is the visible portion of the main map
  this.viewPortWidth  = [% view_port_width %];
  this.viewPortHeight = [% view_port_height %];

  this.tileSize = [% tile_size %];
  this.f_dragging = false;
  this.innerDiv = document.getElementById("innerDiv");

  var outerDiv = document.getElementById("outerDiv");
  this.outerDiv = outerDiv;
  outerDiv.onmousedown
    = function(event) { return this1.startMove(event) };
  outerDiv.onmousemove
    = function(event) { return this1.processMove(event) };
  outerDiv.onmouseup
    = function(event) { return this1.stopMove(event) };
  outerDiv.ondragstart = function() { return false; }  // for IE
  outerDiv.onwheel = function (event) {
    if (event.deltaY < 0) {
      this1.incrZoom();
    }
    else {
      this1.decrZoom();
    }
  }

  this.zoom = 0;
  this.zoomDim = [
    [%- FOREACH dim = dimensions %]
      {
        width:[% dim.width %],
        height:[% dim.height %],
        scale:[% dim.scale %]
      },
    [%- END %]
  ]

  var zoomElt = this.zoomDim[this.zoom];
  this.setInnerDivSize (zoomElt.width, zoomElt.height, zoomElt.scale);
  this.checkTiles();

  document.getElementById("incrZoom").onclick = function() { this1.incrZoom() };
  document.getElementById("decrZoom").onclick = function() { this1.decrZoom() };
}

MainMap.prototype.startMove =
  function (event) {
    // for IE
    if (!event)
      event = window.event;

    this.dragStartLeft = event.clientX;
    this.dragStartTop  = event.clientY;
    var innerDiv = this.innerDiv;
    innerDiv.style.cursor = "move";

    this.top  = innerDiv.offsetTop;
    this.left = innerDiv.offsetLeft;

    this.f_dragging = true;
    return false;
  }

MainMap.prototype.processMove =
  function (event) {
    var zoomElt = this.zoomDim[this.zoom];
    var maxY = 0;
    var minY = -(zoomElt.height - this.viewPortHeight);
    var maxX = 0;
    var minX = -(zoomElt.width  - this.viewPortWidth);

    if (!event) event = window.event;  // for IE
    var innerDiv = this.innerDiv;
    if (this.f_dragging) {
      var shiftedTop = this.top + (event.clientY - this.dragStartTop);
      if (shiftedTop > maxY) shiftedTop = maxY;  // map is not infinite
      if (shiftedTop < minY) shiftedTop = minY;
      innerDiv.style.top = shiftedTop + "px";

      var shiftedLeft = this.left + (event.clientX - this.dragStartLeft);
      if (shiftedLeft > maxX) shiftedLeft = maxX; // map is not infinite
      if (shiftedLeft < minX) shiftedLeft = minX;
      innerDiv.style.left = shiftedLeft + "px";

      this.checkTiles();
      var magnifier = Singleton.getMagnifier();
      magnifier.setPosition();
    }

    var infoDiv = document.getElementById("infoDiv");
    infoDiv.innerHTML =
      "main map (" + innerDiv.style.left + "," + innerDiv.style.top + ") "
        + "x:" + event.clientX + ", y:" + event.clientY;
  }

MainMap.prototype.checkTiles =
  function () {
    var innerDiv = this.innerDiv;
    var tileSize = this.tileSize;
    var visibleTiles = this.getVisibleTiles();
    var visibleTilesMap = {};
    var i;

    //alert ("visibleTiles.length: " + visibleTiles.length);

    var scale = this.zoomDim[this.zoom].scale;
    for (i=0;i<visibleTiles.length; i++) {
      var tile = visibleTiles[i];
      var xy = "x" + tile.x + "y" + tile.y;
      var tileName
        =  xy + "z" + this.zoom;
      visibleTilesMap[tileName] = true;
      var img = document.getElementById (tileName);
      if (!img) {
        img = document.createElement("img");
        img.src 
          = "scale" + scale + "/" + xy + ".[% tile_file_ext %]";
        img.style.position = "absolute";
        img.style.left = (tile.x * tileSize) + "px";
        img.style.top = (tile.y * tileSize) + "px";
        img.setAttribute("id", tileName);
        innerDiv.appendChild(img);
      }
    }

    var imgs = innerDiv.getElementsByTagName("img");
    for (i = 0; i < imgs.length; i++) {
      var id = imgs[i].getAttribute("id");
      if (!visibleTilesMap[id]) {
        innerDiv.removeChild(imgs[i]);
        i--;
      }
    }
  }

MainMap.prototype.getVisibleTiles =
  function () {
    var innerDiv = this.innerDiv;
    var mapX = innerDiv.offsetLeft;
    var mapY = innerDiv.offsetTop;
    var tileSize = this.tileSize;

    var startX = Math.abs(Math.floor(mapX / tileSize)) - 1;
    if (startX < 0) startX = 0;
    var startY = Math.abs(Math.floor(mapY / tileSize)) - 1;
    if (startY < 0) startY = 0;
    var tilesX = Math.ceil(this.viewPortWidth / tileSize) + 1;
    var tilesY = Math.ceil(this.viewPortHeight / tileSize) + 1;

    var visibleTiles = [];
    var counter = 0;
    for (x = startX; x < (tilesX + startX); x++) {
      for (y = startY; y < (tilesY + startY); y++) {
        var tile = {};
        tile.x = x;
        tile.y = y;
        visibleTiles[counter++] = tile;
      }
    }
    return visibleTiles;
  }

MainMap.prototype.stopMove =
  function (event) {
    this.innerDiv.style.cursor = "";
    this.f_dragging = false;
  }

// movement in the magnifier moves main map's view port
MainMap.prototype.setViewPort =
  function () {
    var magDiv   = document.getElementById("magnifier");
    var innerDiv = this.innerDiv;
    var magLeft        = magDiv.offsetLeft;
    var magTop         = magDiv.offsetTop;
    var innerDivWidth  = innerDiv.clientWidth;
    var innerDivHeight = innerDiv.clientHeight;

    /* set innerDivLeft */
    var innerDivLeftMin = [% view_port_width %] - innerDivWidth;
    var innerDivLeft
      = Math.round((-magLeft) * innerDivWidth  / [% mini_map_width  %]);
    if (innerDivLeft < innerDivLeftMin) innerDivLeft = innerDivLeftMin;
    innerDiv.style.left = innerDivLeft + "px";

    /* set innerDivTop */
    var innerDivTopMin = [% view_port_height %] - innerDivHeight;
    var innerDivTop
      = Math.round((-magTop)  * innerDivHeight / [% mini_map_height %]);
    if (innerDivTop < innerDivTopMin) innerDivTop = innerDivTopMin;
    innerDiv.style.top  = innerDivTop  + "px";

    this.checkTiles();
  }

MainMap.prototype.setInnerDivSize =
  function (width, height, scale) {
    var innerDiv = this.innerDiv;
    innerDiv.style.width  = width  + "px";
    innerDiv.style.height = height + "px";
    var magnifier = Singleton.getMagnifier();
    magnifier.setPosition();
    magnifier.setSize (width, height);

    var resolutionInfo = document.getElementById("resolutionInfo");
    resolutionInfo.innerHTML
      = scale + "%, " +  width + "px by " + height + "px" ;
  }

MainMap.prototype.setZoom =
  function (newZoom) {
    if (this.zoom == newZoom) return;

    var oldZ = this.zoomDim[this.zoom];
    var newZ = this.zoomDim[newZoom];
    var innerDiv = this.innerDiv;
    var imgs = innerDiv.getElementsByTagName("img");
    while (imgs.length > 0) {
      innerDiv.removeChild(imgs[0]);
    }

    var oldLeft   = innerDiv.offsetLeft -1;
    var oldTop    = innerDiv.offsetTop -1;

    var newLeft = Math.round(newZ.width  * oldLeft / oldZ.width);
    var newTop  = Math.round(newZ.height * oldTop  / oldZ.height);
    innerDiv.style.left = newLeft + "px";
    innerDiv.style.top  = newTop  + "px";

    this.zoom = newZoom;  // set the global zoom
    this.setInnerDivSize (newZ.width, newZ.height, newZ.scale);
    this.checkTiles();
  }

MainMap.prototype.incrZoom =
  function () {
    var newZoom = Math.min(this.zoom + 1, [% dimensions.size - 1 %]);
    this.setZoom(newZoom);
  }

MainMap.prototype.decrZoom =
  function () {
    var newZoom = Math.max(this.zoom - 1, 0);
    this.setZoom(newZoom);
  }

function atoi (s) {
  if (s == null || s == '') {
    return 0;
  }
  return parseInt(s);
}

